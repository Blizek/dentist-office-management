# Generated by Django 5.2.4 on 2025-08-10 21:55

import datetime
import dentman.storage
import dentman.utils
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('app', '0012_alter_user_profile_photo'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('resource_name', models.CharField(max_length=255, verbose_name='Resource name')),
                ('actual_amount', models.DecimalField(decimal_places=7, default=0.0, max_digits=20, verbose_name='Actual amount')),
                ('created_by', models.ForeignKey(blank=True, default=None, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created_by_set', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('default_metric', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.metrics', verbose_name='Default metric')),
                ('updated_by', models.ForeignKey(blank=True, default=None, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated_by_set', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'verbose_name': 'resource',
                'verbose_name_plural': 'resources',
            },
        ),
        migrations.CreateModel(
            name='ResourcesUpdate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('amount_change', models.DecimalField(decimal_places=7, max_digits=20, verbose_name='Amount change')),
                ('is_newly_delivered', models.BooleanField(default=True, help_text="If it's new resource that has been delivered, select checkbox. If it's update about used resources unselect checkbox", verbose_name='Is newly delivered')),
                ('update_datetime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Update datetime')),
                ('created_by', models.ForeignKey(blank=True, default=None, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created_by_set', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('metric', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.metrics', verbose_name='Metric')),
                ('resource', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='man.resource', verbose_name='Resource')),
                ('updated_by', models.ForeignKey(blank=True, default=None, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated_by_set', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'verbose_name': 'resources update',
                'verbose_name_plural': 'resources updates',
            },
        ),
        migrations.CreateModel(
            name='Worker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('since_when', models.DateField(default=datetime.date.today, help_text='Date since this user is a worker', verbose_name='Since when')),
                ('to_when', models.DateField(blank=True, help_text='Date until this user is a worker', null=True, verbose_name='To when')),
                ('is_active', models.BooleanField(default=True, editable=False, verbose_name='Is active')),
                ('created_by', models.ForeignKey(blank=True, default=None, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created_by_set', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('updated_by', models.ForeignKey(blank=True, default=None, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated_by_set', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'worker',
                'verbose_name_plural': 'workers',
            },
        ),
        migrations.CreateModel(
            name='SpecialAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('date', models.DateField(verbose_name='Date of availability')),
                ('since', models.TimeField(help_text='Time since when worker is available that day', verbose_name='Since when')),
                ('until', models.TimeField(help_text='Time until worker is available that day', verbose_name='Until when')),
                ('reason', models.TextField(blank=True, verbose_name='Reason')),
                ('created_by', models.ForeignKey(blank=True, default=None, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created_by_set', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('updated_by', models.ForeignKey(blank=True, default=None, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated_by_set', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='man.worker', verbose_name='Worker')),
            ],
            options={
                'verbose_name': 'special availability',
                'verbose_name_plural': 'special availabilities',
            },
        ),
        migrations.CreateModel(
            name='ManagementStaff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('is_hr', models.BooleanField(default=False, help_text="If worker can employ and lay off other workers (which don't have hr role) select the checkbox", verbose_name='Is HR')),
                ('is_financial', models.BooleanField(default=False, help_text='If worker can manage finance, get access to financial summaries select the checkbox', verbose_name='Is financial')),
                ('created_by', models.ForeignKey(blank=True, default=None, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created_by_set', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('updated_by', models.ForeignKey(blank=True, default=None, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated_by_set', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('worker', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='man.worker', verbose_name='Worker')),
            ],
            options={
                'verbose_name': 'management staff',
                'verbose_name_plural': 'management staffs',
            },
        ),
        migrations.CreateModel(
            name='Inaccessibility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('date', models.DateField(verbose_name='Date of inaccessibility')),
                ('is_whole_day', models.BooleanField(default=False, help_text='Select checkbox if worker is inaccessible whole day', verbose_name='Is whole day')),
                ('since', models.TimeField(blank=True, help_text='Time since when worker is inaccessible that day (type only inaccessibility is not for whole day)', null=True, verbose_name='Since when')),
                ('until', models.TimeField(blank=True, help_text='Time until worker is inaccessible that day (type only inaccessibility is not for whole day)', null=True, verbose_name='Until when')),
                ('created_by', models.ForeignKey(blank=True, default=None, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created_by_set', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('updated_by', models.ForeignKey(blank=True, default=None, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated_by_set', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='man.worker', verbose_name='Worker')),
            ],
            options={
                'verbose_name': 'inaccessibility',
                'verbose_name_plural': 'unavailability',
            },
        ),
        migrations.CreateModel(
            name='Employment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('type_of_employment', models.PositiveSmallIntegerField(choices=[('full_time', 'Full-time'), ('part_time', 'Part-time'), ('contract', 'Contract'), ('fixed_term', 'Fixed-term'), ('temporary', 'Temporary'), ('internship', 'Internship'), ('traineeship', 'Traineeship'), ('volunteer', 'Volunteer')], verbose_name='Type of employment')),
                ('is_for_limited_time', models.BooleanField(default=False, help_text='If employment is set only for limited time, select the checkbox', verbose_name='Is limited for time')),
                ('since_when', models.DateField(help_text='Date since new employee starts working', verbose_name='Since when')),
                ('until_when', models.DateField(help_text='Date until new employee works (select only when job is for limited time)', verbose_name='Until when')),
                ('agreement_date', models.DateField(help_text='Date when both sides reached an agreement', verbose_name='Agreement date')),
                ('salary', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Salary')),
                ('is_active', models.BooleanField(default=True, help_text='If this contract is still active, select the checkbox', verbose_name='Is active')),
                ('contract_scan', models.FileField(storage=dentman.storage.CustomFileSystemStorage(), upload_to=dentman.utils.get_upload_path, validators=[django.core.validators.FileExtensionValidator(['pdf'])], verbose_name='Contract scan file')),
                ('created_by', models.ForeignKey(blank=True, default=None, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created_by_set', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('updated_by', models.ForeignKey(blank=True, default=None, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated_by_set', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('representative', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='man.managementstaff', verbose_name='Representative')),
                ('new_employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='man.worker', verbose_name='New employee')),
            ],
            options={
                'verbose_name': 'employment',
                'verbose_name_plural': 'employments',
            },
        ),
        migrations.CreateModel(
            name='DentistStaff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('is_dentist', models.BooleanField(default=False, help_text='If worker is a dentist check the checkbox, otherwise means that worker is dentist assistant', verbose_name='Is dentist')),
                ('created_by', models.ForeignKey(blank=True, default=None, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created_by_set', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('updated_by', models.ForeignKey(blank=True, default=None, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated_by_set', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('worker', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='man.worker', verbose_name='Worker')),
            ],
            options={
                'verbose_name': 'dentist staff',
                'verbose_name_plural': 'dentist staffs',
            },
        ),
        migrations.CreateModel(
            name='Bonus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('bonus_amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Bonus amount')),
                ('bonus_date', models.DateField(verbose_name='Bonus date')),
                ('bonus_reason', models.TextField(blank=True, verbose_name='Bonus reason')),
                ('created_by', models.ForeignKey(blank=True, default=None, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created_by_set', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('updated_by', models.ForeignKey(blank=True, default=None, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated_by_set', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('management_staff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='man.managementstaff', verbose_name='Management staff')),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='man.worker', verbose_name='Worker')),
            ],
            options={
                'verbose_name': 'bonus',
                'verbose_name_plural': 'bonuses',
            },
        ),
        migrations.CreateModel(
            name='WorkersAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('weekday', models.SmallIntegerField(choices=[(1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday'), (7, 'Sunday')], verbose_name='Weekday')),
                ('since', models.TimeField(help_text='Time since when worker is available that day', verbose_name='Since when')),
                ('until', models.TimeField(help_text='Time until worker is available that day', verbose_name='Until when')),
                ('created_by', models.ForeignKey(blank=True, default=None, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created_by_set', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('updated_by', models.ForeignKey(blank=True, default=None, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated_by_set', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='man.worker', verbose_name='Worker')),
            ],
            options={
                'verbose_name': "worker's availability",
                'verbose_name_plural': "workers' availabilities",
            },
        ),
    ]
